/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 02 2020 14:37:50 GMT-0500 (Central Daylight Time).
 */

define([
    'deepforge/viz/ConfigDialog',
    'js/Constants',
], function (
    ConfigDialog,
    CONSTANTS,
) {

    'use strict';

    class InteractiveEditorControl {
        constructor(options) {

            this._logger = options.logger.fork('Control');
            this._client = options.client;

            // Initialize core collections and variables
            this._widget = options.widget;
            this.initializeWidgetHandlers(this._widget);
            this._widget.save = () => this.save();
            this._embedded = options.embedded;

            this._currentNodeId = null;

            this._logger.debug('ctor finished');
        }

        initializeWidgetHandlers (widget) {
            const features = widget.getCapabilities();
            if (features.save) {
                widget.save = () => this.save();
            }
            widget.getConfigDialog = () => new ConfigDialog(this._client);
        }

        /* * * * * * * * Visualizer content update callbacks * * * * * * * */
        // One major concept here is with managing the territory. The territory
        // defines the parts of the project that the visualizer is interested in
        // (this allows the browser to then only load those relevant parts).
        selectedObjectChanged (nodeId) {
            const desc = this.getObjectDescriptor(nodeId);

            this._logger.debug('activeObject nodeId \'' + nodeId + '\'');

            // Remove current territory patterns
            if (this._currentNodeId) {
                this._client.removeUI(this._territoryId);
            }

            this._currentNodeId = nodeId;

            if (typeof this._currentNodeId === 'string') {
                // Put new node's info into territory rules
                this._selfPatterns = {};
                this._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

                this._widget.setTitle(desc.name.toUpperCase());


                this._territoryId = this._client
                    .addUI(this, events => this._eventCallback(events));

                // Update the territory
                this._client.updateTerritory(this._territoryId, this._selfPatterns);
            }
        }

        createNode(desc, parent) {
            if (!parent) {
                parent = this._client.getNode(this._currentNodeId);
            }
            desc.pointers = desc.pointers || {};
            desc.attributes = desc.attributes || {};
            desc.pointers.base = desc.pointers.base || desc.type;

            const metanodes = this._client.getAllMetaNodes();
            const base = metanodes
                .find(node => node.getAttribute('name') === desc.pointers.base);

            const node = this._client.createNode({parent, base});
            const attributes = Object.entries(desc.attributes);
            const pointers = Object.entries(desc.pointers);

            attributes.forEach(entry => {
                const [name, value] = entry;
                this._client.setAttribute(node.getId(), name, value);
            });

            pointers.forEach(entry => {
                const [name, id] = entry;
                this._client.setPointer(node.getId(), name, id);
            });

            return node;
        }

        save() {
            this._client.startTransaction();
            const data = this.createNode(this._widget.getSnapshot());
            //const implicitOp = this.createNode(this._widget.getEditorState(), data);
            //this._client.setPointer(data.getId(), 'provenance', implicitOp.getId());
            //const operation = this.createNode(this._widget.getOperation(), implicitOp);
            //this._client.setPointer(implicitOp.getId(), 'operation', operation.getId());
            this._client.completeTransaction();
        }

        // This next function retrieves the relevant node information for the widget
        getObjectDescriptor (nodeId) {
            const node = this._client.getNode(nodeId);

            if (node) {
                return {
                    id: node.getId(),
                    name: node.getAttribute('name'),
                    childrenIds: node.getChildrenIds(),
                    parentId: node.getParentId(),
                };
            }
        }

        /* * * * * * * * Node Event Handling * * * * * * * */
        _eventCallback (events) {
            var i = events ? events.length : 0,
                event;

            this._logger.debug('_eventCallback \'' + i + '\' items');

            while (i--) {
                event = events[i];
                switch (event.etype) {

                case CONSTANTS.TERRITORY_EVENT_LOAD:
                    this._onLoad(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    this._onUpdate(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    this._onUnload(event.eid);
                    break;
                default:
                    break;
                }
            }

            this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
        }

        _onLoad (gmeId) {
            var description = this.getObjectDescriptor(gmeId);
            this._widget.addNode(description);
        }

        _onUpdate (gmeId) {
            var description = this.getObjectDescriptor(gmeId);
            this._widget.updateNode(description);
        }

        _onUnload (gmeId) {
            this._widget.removeNode(gmeId);
        }

        _stateActiveObjectChanged (model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        }

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        destroy () {
            this._detachClientEventListeners();
        }

        _attachClientEventListeners () {
            this._detachClientEventListeners();
            if (!this._embedded) {
                WebGMEGlobal.State.on(
                    'change:' + CONSTANTS.STATE_ACTIVE_OBJECT,
                    this._stateActiveObjectChanged,
                    this
                );
            }
        }

        _detachClientEventListeners () {
            if (!this._embedded) {
                WebGMEGlobal.State.off(
                    'change:' + CONSTANTS.STATE_ACTIVE_OBJECT,
                    this._stateActiveObjectChanged
                );
            }
        }

        onActivate () {
            this._attachClientEventListeners();

            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
            }
        }

        onDeactivate () {
            this._detachClientEventListeners();
        }
    }

    return InteractiveEditorControl;
});
